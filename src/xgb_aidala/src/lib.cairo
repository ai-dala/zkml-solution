mod xgb_inference;

fn main(input_vector: Span<i32>) -> i32 {
    let tree_0 = xgb_inference::Tree {
    base_weights: array![-3025, -3308, 2255, -1141, -3991, 1789, 7884, -2555, 441, -4297, -2043, -887, 2348, 3500, 8598, -1043, -606, -707, 393, -1371, -1017, -789, -422, -743, 10, 343, 1059, -205, 1368, 1807, 2915].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![6, 1, 6, 5, 7, 1, 7, 5, 1, 4, 7, 9, 5, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![199407200, 2147483647, 332372100, 27723083, 175989530, 2147483647, 461805660, 21452322, 2147483647, 1250000, 219528900, 378758720, 166272730, 2147483647, 225622660, -1043, -606, -707, 393, -1371, -1017, -789, -422, -743, 10, 343, 1059, -205, 1368, 1807, 2915].span()
};
    let tree_1 = xgb_inference::Tree {
    base_weights: array![-1526, -1987, 5890, 1355, -3052, 5226, 15275, -263, 4252, -3500, -230, 2805, 6573, 9084, 16250, -468, 295, -76, 1787, -1186, -608, -351, 191, 458, 1085, 823, 2237, 3441, 2104, 3224, 5109].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![7, 1, 7, 6, 8, 6, 6, 6, 1, 4, 8, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![259313160, 2147483647, 461805660, 45174838, 212726250, 218957230, 332372100, 36898773, 2147483647, 1250000, 260908370, 2147483647, 2147483647, 2147483647, 2147483647, -468, 295, -76, 1787, -1186, -608, -351, 191, 458, 1085, 823, 2237, 3441, 2104, 3224, 5109].span()
};
    let tree_2 = xgb_inference::Tree {
    base_weights: array![-14, -643, 9424, 3886, -2094, 8595, 21980, 1789, 7642, -2697, 1520, 4685, 10153, 17208, 23014, -45, 960, 623, 2924, -1006, -181, 97, 874, 421, 1866, 2450, 3588, 4698, 5850, 7117, 4735].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![7, 1, 7, 6, 9, 1, 1, 6, 1, 4, 8, 9, 7, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![254582470, 2147483647, 461805660, 45174838, 247212550, 2147483647, 2147483647, 35707254, 2147483647, 1250000, 260908370, 378758720, 306274410, 2147483647, 2147483647, -45, 960, 623, 2924, -1006, -181, 97, 874, 421, 1866, 2450, 3588, 4698, 5850, 7117, 4735].span()
};
    let tree_3 = xgb_inference::Tree {
    base_weights: array![1514, 654, 11664, 6469, -1251, 10838, 27496, 3962, 10961, -1868, 2904, 8186, 13784, 20117, 28394, 473, 1684, 1470, 4011, -819, 261, 519, 1326, 1839, 2921, 2271, 4488, 2353, 6173, 8661, 6900].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![8, 1, 7, 6, 9, 7, 1, 6, 1, 4, 9, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![297984890, 2147483647, 461805660, 45174838, 243484600, 290492020, 2147483647, 35504870, 2147483647, 1250000, 303227760, 2147483647, 2147483647, 4117254, 2147483647, 473, 1684, 1470, 4011, -819, 261, 519, 1326, 1839, 2921, 2271, 4488, 2353, 6173, 8661, 6900].span()
};
    let tree_4 = xgb_inference::Tree {
    base_weights: array![3051, 2003, 14182, 9080, -342, 13318, 32511, 6250, 14149, -990, 4442, 10631, 16901, 26670, 33773, 1024, 2433, 2327, 5006, -617, 718, 180, 1595, 2878, 3805, 2889, 5483, 3248, 8122, 10318, 8203].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![9, 1, 7, 6, 9, 7, 1, 7, 1, 4, 1, 8, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![344695920, 2147483647, 461805660, 45174838, 243484600, 290492020, 2147483647, 48267566, 2147483647, 1250000, 2147483647, 329416460, 2147483647, 4117254, 2147483647, 1024, 2433, 2327, 5006, -617, 718, 180, 1595, 2878, 3805, 2889, 5483, 3248, 8122, 10318, 8203].span()
};
    let num_trees: u32 = 5;
    let base_score: i32 = 5932;
    let opt_type: u8 = 0;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1, tree_2, tree_3, tree_4].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    return result;
}